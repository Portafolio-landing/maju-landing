---
const languages = [
  { code: "es", name: "ESP", flag: "/pe.svg" },
  { code: "de", name: "GER", flag: "/de.svg" },
  { code: "en", name: "ENG", flag: "/gb.svg" }
];

const url = new URL(Astro.request.url);
const currentPath = url.pathname;
const currentLang = currentPath.startsWith("/en") ? "en" : currentPath.startsWith("/de") ? "de" : "es";

// AÃ±adimos una prop para identificar la instancia
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div class={`language-switcher ${id}`}>
  <button class="lang-btn" data-lang-toggle aria-haspopup="true" aria-expanded="false">
    <img class="current-flag flag-icon" src={languages.find(lang => lang.code === currentLang)?.flag} alt={currentLang}>
    <span class="current-lang">{languages.find(lang => lang.code === currentLang)?.name}</span>
    <svg class="arrow-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 9l6 6 6-6"></path>
    </svg>
  </button>

  <ul class="dropdown" data-lang-dropdown>
    {languages.map((lang) => (
      <li>
        <a href={lang.code === "es" ? "/" : `/${lang.code}/`} class="lang-option">
          <img src={lang.flag} alt={lang.name} class="flag-icon">
          <span>{lang.name}</span>
        </a>
      </li>
    ))}
  </ul>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    // Inicializar todos los selectores de idioma
    document.querySelectorAll('.language-switcher').forEach(switcher => {
      const langToggle = switcher.querySelector('[data-lang-toggle]');
      const langDropdown = switcher.querySelector('[data-lang-dropdown]');

      langToggle.addEventListener("click", (event) => {
        event.stopPropagation();

        const isLangOpen = langDropdown.classList.contains("open");

        if (!isLangOpen) {
          document.dispatchEvent(new Event("close-menu"));
        }

        // Cerrar todos los otros dropdowns primero
        document.querySelectorAll('.dropdown').forEach(dropdown => {
          if (dropdown !== langDropdown) {
            dropdown.classList.remove("open");
            dropdown.previousElementSibling.setAttribute("aria-expanded", "false");
          }
        });

        langDropdown.classList.toggle("open", !isLangOpen);
        langToggle.setAttribute("aria-expanded", langDropdown.classList.contains("open"));
      });
    });

    document.addEventListener("click", (event) => {
      const dropdowns = document.querySelectorAll('.dropdown');
      dropdowns.forEach(dropdown => {
        const toggle = dropdown.previousElementSibling;
        if (!toggle.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.classList.remove("open");
          toggle.setAttribute("aria-expanded", "false");
        }
      });
    });

    document.addEventListener("close-language", () => {
      document.querySelectorAll('.dropdown').forEach(dropdown => {
        dropdown.classList.remove("open");
        dropdown.previousElementSibling.setAttribute("aria-expanded", "false");
      });
    });

    // Actualizar el idioma actual en todos los selectores
    const url = new URL(window.location.href);
    const firstPathSegment = url.pathname.split('/')[1];
    const currentLang = ["en", "de"].includes(firstPathSegment) ? firstPathSegment : "es";

    const langData = {
      es: { name: "ESP", flag: "/pe.svg" },
      en: { name: "ENG", flag: "/gb.svg" },
      de: { name: "GER", flag: "/de.svg" }
    };

    document.querySelectorAll('.language-switcher').forEach(switcher => {
      const flagElement = switcher.querySelector('.current-flag');
      const langElement = switcher.querySelector('.current-lang');
      
      if (flagElement && langElement) {
        flagElement.src = langData[currentLang].flag;
        langElement.innerText = langData[currentLang].name;
      }
    });
  });
</script>

<style>
  /* Los estilos se mantienen igual */
  .language-switcher {
    position: relative;
    display: inline-block;
  }

  .lang-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    background: white;
    border: none;
    padding: 10px 15px;
    font-size: 28px;
    font-weight: 400;
    font-family: 'Montserrat', sans-serif;
    color: #5E3023;
    border-radius: 30px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .flag-icon {
    width: 30px;
    height: auto;
  }

  .arrow-icon {
    width: 30px;
    height: 30px;
    stroke: #5E3023;
  }

  .dropdown {
    display: none;
    position: absolute;
    background: white;
    border-radius: 18px;
    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
    list-style: none;
    width: 221px;
    top: 100%; 
    left: -50px;
    z-index: 100;
    padding: 0; 
    overflow: hidden;
  }

  .dropdown.open {
    display: block;
  }

  .lang-option {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 15px;
    justify-content: center;
    text-decoration: none;
    color: #5E3023;
    font-size: 28px;
    font-family: 'Montserrat', sans-serif;
    transition: background 0.3s ease;
  }

  .lang-option:hover {
    background: rgba(137, 87, 55, 0.15);
  }

  @media (min-width: 1024px) and (max-width: 1479px) { 
    .language-switcher {
      transform: scale(0.9); 
    }
  }

  @media (min-width: 768px) and (max-width: 1023px) { 
    .language-switcher {
      transform: scale(0.8);
    }
  }

  @media (min-width: 360px) and (max-width: 767px) { 
    .language-switcher {
      transform: scale(0.7); 
    }
  }
</style>